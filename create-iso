#!/usr/bin/env bash

set -euo pipefail
IFS=$'\n\t'

CUR_TIME=$(date +%FT%TZ)
DVD_LAYOUT=/data/fedora-22-iso-layout
DVD_TITLE='Fedora-22-Joyent'
ISO=Fedora-Server-netinst-x86_64-22.iso
ISO_CHECKSUM=Fedora-Server-22-x86_64-CHECKSUM
ISO_DIR=/data/fetched-fedora-iso
ISO_FILENAME=./fedora-22-joyent.iso
KS_CFG=./ks.cfg
GUESTTOOLS=sdc-vmtools
MIRROR=http://fedora.bhs.mirrors.ovh.net/linux/releases/22/Server/x86_64/iso
MOUNT_POINT=/mnt/fedora22

function fetch_iso() {
    if [ ! -d $ISO_DIR ]; then
        mkdir -p $ISO_DIR
    fi
    
    if [ ! -e $ISO_DIR/$ISO ]; then
        echo "==> No local copy of $ISO. Fetching latest $ISO"
        curl -s -o $ISO_DIR/$ISO $MIRROR/$ISO
    fi
    
    # Check if we already imported the key
    #
    # pub  4096R/8E1431D5 2014-07-09 Fedora (22) <fedora@fedoraproject.org>
    #  Key fingerprint = C527 EA07 A934 9B58 9C35 E1BF 11AD C094 8E14 31D5
    
    set +e 
    gpg --list-keys | grep 4096R/8E1431D5 > /dev/null
    if [[ $? -gt 0 ]]; then
        echo "==> Adding gpg signing keys"
        gpg --keyserver pool.sks-keyservers.net --recv-keys C527EA07A9349B589C35E1BF11ADC0948E1431D5
    fi
    set -e
    
    echo "==> Checking to see if we have the latest $ISO:"
    echo "===> Getting signed checksum ($ISO_CHECKSUM)"
    curl -s -o $ISO_DIR/$ISO_CHECKSUM $MIRROR/$ISO_CHECKSUM
    
    ISO_NAME=$(echo $ISO | cut -f1 -d'.')
    
    echo "===> Verifying signed checksum $ISO_CHECKSUM"
    gpg --verify $ISO_DIR/$ISO_CHECKSUM
    
    CHECKSUM=$(grep $ISO_NAME $ISO_DIR/$ISO_CHECKSUM | cut -f4 -d' ')
    
    if [[ $(sha256sum $ISO_DIR/$ISO | cut -f1 -d' ') == "$CHECKSUM" ]]; then
        echo "===> Checksums match, using local copy of $ISO"
    else
        echo "===> Checksums do not match. Fetching latest $ISO"
        curl -s -o $ISO_DIR/$ISO $MIRROR/$ISO
        
        echo "===> Verifying sha256 of $ISO"
        pushd $PWD
        cd $ISO_DIR
        grep "$ISO\$" $ISO_CHECKSUM | sha256sum -c -
        popd
    fi
}

function create_layout() {
    echo "==> Creating ISO Layout"
    if [ -d $DVD_LAYOUT ]; then
        echo "==> Layout $DVD_LAYOUT exists, deleting..."
        rm -rf $DVD_LAYOUT
    fi
    echo "==> Creating $DVD_LAYOUT"
    mkdir -p $DVD_LAYOUT

    # Check if $MOUNT_POINT is already mounted
    # This may happen if a previous build failed
    if [ $(grep $MOUNT_POINT /proc/mounts) ]; then
      echo "===> Unmounting $MOUNT_POINT from previous build..."
        umount $MOUNT_POINT
    fi

    echo "==> Mounting $ISO to $MOUNT_POINT"
    if [ ! -d $MOUNT_POINT ]; then
        echo "===> Creating $MOUNT_POINT..."
        mkdir $MOUNT_POINT
    fi
    mount $ISO_DIR/$ISO $MOUNT_POINT -o loop
    
    cp -a $MOUNT_POINT/* $DVD_LAYOUT

    umount $MOUNT_POINT
    
    echo "==> Finished Populating Layout"
}

function copy_ks_cfg() {
    echo "==> Copying Kickstart file"
    cp $KS_CFG $DVD_LAYOUT/
}

function copy_guest_tools() {
    echo "==> Copying $GUESTTOOLS"
    echo "==> Initiallizing and fetching submodule $GUESTTOOLS"
    git submodule init
    git submodule update
    cp -R ./$GUESTTOOLS/ $DVD_LAYOUT/ 
}


function modify_boot_menu() {
    echo "==> Modifying grub boot menu"
    cp ./isolinux.cfg $DVD_LAYOUT/isolinux/
}

function cleanup_layout() {
    echo "==> Cleaning up $DVD_LAYOUT"
    find $DVD_LAYOUT -name TRANS.TBL -exec rm '{}' +
}

function create_newiso() {
    copy_guest_tools
    cleanup_layout
    copy_ks_cfg
    modify_boot_menu
    echo "==> Preparing NEW ISO"

    pushd $DVD_LAYOUT > /dev/null 2>&1
    
    echo "==> Creating NEW ISO"
    mkisofs -r -R -J -T -v \
     -no-emul-boot -boot-load-size 4 -boot-info-table \
     -V "$DVD_TITLE" -p "Joyent" \
     -A "$DVD_TITLE - $CUR_TIME" \
     -b isolinux/isolinux.bin -c isolinux/boot.cat \
     -x "lost+found" -o $ISO_FILENAME $DVD_LAYOUT
    echo "==> Fixing up NEW ISO"
    echo implantisomd5 $ISO_FILENAME
    implantisomd5 $ISO_FILENAME
    popd > /dev/null 2>&1
    echo "==> NEW ISO $ISO_FILENAME is ready"
}

# main line

usage()
{
    cat <<EOF
Usage:
        $0 [options] command [command]
option:
        -h                    - this usage

Commands:
        fetch                 - fetch ISO
        layout                - create layout for new ISO
        finish                - create the new ISO

EOF
    exit 1
}

args=`getopt -o h -n 'create-iso' -- "$@"`

if [[ $# == 0 ]]; then
    usage;
fi

eval set -- $args

while true ; do
   case "$1" in
       -h)
            usage;
            break;;
       --)
           shift; break;;
   esac
done

for arg ; do
    if [ $arg = 'fetch' ] ; then
        fetch_iso
    fi
    if [ $arg = 'layout' ] ; then
        create_layout
    fi
    if [ $arg = 'finish' ] ; then
        create_newiso
    fi
done
